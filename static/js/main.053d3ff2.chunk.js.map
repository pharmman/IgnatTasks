{"version":3,"sources":["p2-homeworks/h4/common/c2-SuperButton/SuperButton.module.css","p2-homeworks/h4/common/c3-SuperCheckbox/SuperCheckbox.module.css","p2-homeworks/h12/HW12.module.css","p1-main/m1-ui/u1-app/App.module.css","p2-homeworks/h11/common/c7-SuperRange/SuperRange.module.css","p2-homeworks/h4/common/c2-SuperButton/SuperButton.tsx","p2-homeworks/h4/common/c3-SuperCheckbox/SuperCheckbox.tsx","p2-homeworks/h13/dal/RequestsAPI .ts","p2-homeworks/h13/Request.tsx","p2-homeworks/h13/HW13.tsx","p2-homeworks/h12/bll/themeReducer.ts","p2-homeworks/h7/common/c6-SuperRadio/SuperRadio.tsx","p2-homeworks/h12/HW12.tsx","p2-homeworks/h11/common/c7-SuperRange/SuperRange.tsx","p2-homeworks/h11/common/c8-SuperDoubleRange/SuperDoubleRange.tsx","p2-homeworks/h11/HW11.tsx","p1-main/m1-ui/u1-app/App.tsx","serviceWorker.ts","p2-homeworks/h10/bll/loadingReducer.ts","p2-homeworks/h10/bll/store.ts","index.tsx"],"names":["module","exports","SuperButton","red","className","restProps","finalClassName","s","default","SuperCheckbox","type","onChange","onChangeChecked","children","spanClassName","finalInputClassName","checkbox","e","currentTarget","checked","requestsAPI","success","axios","post","Request","useState","setChecked","requestInfo","setRequestInfo","onClick","then","res","data","info","catch","err","console","warn","JSON","stringify","response","errorText","style","textAlign","fontStyle","HW13","initState","theme","SuperRadio","name","options","value","onChangeOption","onChangeCallback","mappedOptions","map","o","i","key","themes","HW12","useSelector","state","dispatch","useDispatch","payload","changeThemeC","SuperRange","onChangeRange","finalRangeClassName","range","SuperDoubleRange","Slider","aria-labelledby","valueLabelDisplay","HW11","value1","setValue1","value2","setValue2","handleRange","values","Array","isArray","App","Boolean","window","location","hostname","match","loading","reducers","combineReducers","action","store","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.053d3ff2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"default\":\"SuperButton_default__71ClM\",\"red\":\"SuperButton_red__3eblg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkbox\":\"SuperCheckbox_checkbox__1bcek\",\"spanClassName\":\"SuperCheckbox_spanClassName__3Xjt7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dark\":\"HW12_dark__23jhm\",\"dark-text\":\"HW12_dark-text__F5Kjl\",\"red\":\"HW12_red__Z0HGZ\",\"red-text\":\"HW12_red-text__1C_05\",\"some\":\"HW12_some__1lbMP\",\"some-text\":\"HW12_some-text__YJnvk\",\"pink\":\"HW12_pink__1XpMd\",\"yellow\":\"HW12_yellow__2xHvK\",\"pink-text\":\"HW12_pink-text__1r7wp\",\"yellow-text\":\"HW12_yellow-text__IXRvg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__1djBs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"range\":\"SuperRange_range__3S-Ek\"};","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from 'react';\r\nimport s from './SuperButton.module.css';\r\n\r\n// тип пропсов обычной кнопки, children в котором храниться название кнопки там уже описан\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;\r\n\r\ntype SuperButtonPropsType = DefaultButtonPropsType & {\r\n    red?: boolean\r\n}\r\n\r\nconst SuperButton: React.FC<SuperButtonPropsType> = (\r\n    {\r\n        red, className,\r\n        ...restProps// все остальные пропсы попадут в объект restProps, там же будет children\r\n    }\r\n) => {\r\n    const finalClassName = `${red ? s.red : s.default } ${className}`;\r\n\r\n    return (\r\n        <button className={finalClassName}\r\n                {...restProps} // отдаём кнопке остальные пропсы если они есть (children там внутри)\r\n        />\r\n    );\r\n}\r\n\r\nexport default SuperButton;\r\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes} from \"react\";\r\nimport s from \"./SuperCheckbox.module.css\";\r\n\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\r\n\r\ntype SuperCheckboxPropsType = DefaultInputPropsType & {\r\n    onChangeChecked?: (checked: boolean) => void\r\n    spanClassName?: string\r\n};\r\n\r\nconst SuperCheckbox: React.FC<SuperCheckboxPropsType> = (\r\n    {\r\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n        onChange, onChangeChecked,\r\n        className, spanClassName,\r\n        children, // в эту переменную попадёт текст, типизировать не нужно так как он затипизирован в React.FC\r\n\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange && onChange(e)\r\n        onChangeChecked && onChangeChecked(e.currentTarget.checked)// сделайте так чтоб работал onChange и onChangeChecked\r\n    }\r\n\r\n    const finalInputClassName = `${s.checkbox} ${className ? className : \"\"}`;\r\n\r\n    return (\r\n        <label>\r\n            <input\r\n                type={\"checkbox\"}\r\n                onChange={onChangeCallback}\r\n                className={finalInputClassName}\r\n\r\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (checked например там внутри)\r\n            />\r\n            {children && <span className={s.spanClassName}>{children}</span>}\r\n        </label> // благодаря label нажатие на спан передастся в инпут\r\n    );\r\n}\r\n\r\nexport default SuperCheckbox;\r\n","import axios from 'axios'\r\n\r\nexport type ResponseType = {\r\n    errorText:string\r\n    info:string\r\n    yourBody: {}\r\n    yourQuery: {}\r\n}\r\n\r\nexport const requestsAPI = {\r\n    createSomething(success:boolean) {\r\n        return  axios.post<ResponseType>('https://neko-cafe-back.herokuapp.com/auth/test', {success})\r\n    }\r\n}","import React, {CSSProperties, useState} from 'react';\r\nimport SuperButton from '../h4/common/c2-SuperButton/SuperButton';\r\nimport SuperCheckbox from '../h4/common/c3-SuperCheckbox/SuperCheckbox';\r\nimport {requestsAPI} from './dal/RequestsAPI ';\r\n\r\nexport const Request: React.FC = () => {\r\n    const [checked, setChecked] = useState<boolean>(false)\r\n    const [requestInfo, setRequestInfo] = useState<string>('')\r\n\r\n    const responseStyle: CSSProperties = {\r\n        textAlign: 'center',\r\n        fontStyle: 'italic'\r\n    }\r\n\r\n    const makeRequest = () => {\r\n        requestsAPI.createSomething(checked)\r\n            .then(res => {\r\n                setRequestInfo(res.data.info)\r\n            })\r\n            .catch(err => {\r\n                console.warn(JSON.stringify(err))\r\n                setRequestInfo(err.response.data.errorText)\r\n            })\r\n    }\r\n\r\n    const onChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setChecked(e.currentTarget.checked)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <SuperButton onClick={makeRequest}>Make Request</SuperButton>\r\n            <SuperCheckbox checked={checked} onChange={onChangeHandler}/> <span>Хочешь хороший ответ?</span>\r\n            <h1 style={responseStyle}>{requestInfo}</h1>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport {Request} from './Request';\r\n\r\n\r\nexport function HW13 () {\r\n    return (\r\n        <div>\r\n            homeworks 13\r\n            <Request/>\r\n        </div>\r\n    )\r\n}","export type ThemeType = 'some'| 'red'| 'dark' | 'yellow' | 'pink'\r\n\r\ntype InitStateType = {\r\n    theme: 'some'| 'red'| 'dark' | 'yellow' | 'pink'\r\n}\r\n\r\nconst initState:InitStateType = {\r\n    theme: 'some'\r\n};\r\n\r\nexport const themeReducer = (state = initState, action: ActionsType): InitStateType => { // fix any\r\n    switch (action.type) {\r\n        case \"CHANGE_THEME\": {\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            };\r\n        }\r\n        default: return state;\r\n    }\r\n};\r\n\r\ntype ActionsType = ChangeThemeCType\r\n\r\ntype ChangeThemeCType = ReturnType<typeof changeThemeC>\r\n\r\nexport const changeThemeC = (theme:ThemeType) => {\r\n    return {\r\n        type: 'CHANGE_THEME',\r\n        payload: {\r\n            theme\r\n        }\r\n    } as const\r\n};","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes} from 'react';\r\n\r\ntype DefaultRadioPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\ntype SuperRadioPropsType = DefaultRadioPropsType & {\r\n    options?: any[]\r\n    onChangeOption?: (option: any) => void\r\n}\r\n\r\nexport const SuperRadio: React.FC<SuperRadioPropsType> = (\r\n    {\r\n        type, name,\r\n        options, value,\r\n        onChange, onChangeOption,\r\n        ...restProps\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChangeOption && onChangeOption(e.currentTarget.value)\r\n        onChange && onChange(e)\r\n    }\r\n\r\n\r\n    const mappedOptions: any[] = options ? options.map((o, i) => (\r\n        <label key={name + '-' + i}>\r\n            <input\r\n                type={'radio'}\r\n                name={name}\r\n                value={o}\r\n                checked={value === o}\r\n                onChange={onChangeCallback}\r\n            />\r\n            {o}\r\n        </label>\r\n    )) : [];\r\n\r\n    return (\r\n        <>\r\n            {mappedOptions}\r\n        </>\r\n    );\r\n}\r\n\r\n","import React from 'react';\r\nimport s from './HW12.module.css';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppStoreType} from '../h10/bll/store';\r\nimport {changeThemeC, ThemeType} from './bll/themeReducer';\r\nimport {SuperRadio} from '../h7/common/c6-SuperRadio/SuperRadio';\r\n\r\nconst themes = ['dark', 'red', 'some', 'pink', 'yellow'];\r\n\r\nfunction HW12() {\r\n    const theme = useSelector<AppStoreType, ThemeType>(state => state.theme.theme) // useSelector\r\n    const dispatch = useDispatch()\r\n\r\n    const onChangeHandler = (theme:ThemeType) => dispatch(changeThemeC(theme))\r\n\r\n\r\n    return (\r\n        <div className={s[theme]}>\r\n            <hr/>\r\n            <span className={s[theme + '-text']}>\r\n                homeworks 12\r\n            </span>\r\n\r\n            <SuperRadio value={theme} options={themes} onChangeOption={onChangeHandler}/>\r\n\r\n            {/*should work (должно работать)*/}\r\n            {/*SuperSelect or SuperRadio*/}\r\n\r\n            <hr/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HW12;\r\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes} from \"react\";\r\nimport s from \"./SuperRange.module.css\";\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\r\n\r\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\r\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\r\ntype SuperRangePropsType = DefaultInputPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\r\n    onChangeRange?: (value: number) => void\r\n};\r\n\r\nconst SuperRange: React.FC<SuperRangePropsType> = (\r\n    {\r\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n        onChange, onChangeRange,\r\n        className,\r\n\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange && onChange(e); // сохраняем старую функциональность\r\n\r\n        onChangeRange && onChangeRange(+e.currentTarget.value);\r\n    }\r\n\r\n    const finalRangeClassName = `${s.range} ${className ? className : \"\"}`;\r\n\r\n    return (\r\n        <>\r\n            <input\r\n                type={\"range\"}\r\n                onChange={onChangeCallback}\r\n                className={finalRangeClassName}\r\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (value например там внутри)\r\n            />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default SuperRange;\r\n","import React, {ChangeEvent} from 'react';\r\nimport {Slider} from '@material-ui/core';\r\n\r\ntype SuperDoubleRangePropsType = {\r\n    onChangeRange?: (value: number | number[]) => void\r\n    value?: number | number[],\r\n    min?:number,\r\n    max?:number,\r\n    step?:number,\r\n    disable?:number\r\n}\r\n\r\nconst SuperDoubleRange: React.FC<SuperDoubleRangePropsType> = (\r\n    {\r\n        onChangeRange, value,\r\n        // min, max, step, disable, ...\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<{}>, value: number | number[]) => {\r\n        onChangeRange && onChangeRange(value)\r\n    }\r\n\r\n    // сделать самому, можно подключать библиотеки\r\n\r\n    return (\r\n        <>\r\n            <Slider value={value} aria-labelledby=\"range-slider\" style={{'width':'200px'}} onChange={onChangeCallback} valueLabelDisplay=\"auto\"/>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default SuperDoubleRange;\r\n","import React, {useState} from 'react';\r\nimport SuperRange from './common/c7-SuperRange/SuperRange';\r\nimport SuperDoubleRange from './common/c8-SuperDoubleRange/SuperDoubleRange';\r\n\r\nfunction HW11() {\r\n    const [value1, setValue1] = useState(10);\r\n    const [value2, setValue2] = useState(100);\r\n\r\n    const handleRange = (values: number | number[]) => {\r\n        if(Array.isArray(values)) {\r\n            setValue1(values[0])\r\n            setValue2(values[1])\r\n        } else {\r\n            setValue1(values)\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <hr/>\r\n            homeworks 11\r\n\r\n            {/*should work (должно работать)*/}\r\n            <div>\r\n                <span>{value1}</span>\r\n                <SuperRange\r\n                    value={value1}\r\n                    onChangeRange={handleRange}\r\n                    // сделать так чтоб value1 изменялось\r\n                />\r\n            </div>\r\n\r\n            <div>\r\n                <span>{value1}</span>\r\n                <SuperDoubleRange\r\n                    value={[value1, value2]}\r\n                    onChangeRange={handleRange}\r\n                    // сделать так чтоб value1 и value2 изменялось\r\n                />\r\n                <span>{value2}</span>\r\n            </div>\r\n\r\n            <hr/>\r\n            {/*для личного творчества, могу проверить*/}\r\n            {/*<AlternativeSuperRange/>*/}\r\n            {/*<AlternativeSuperDoubleRange/>*/}\r\n            <hr/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HW11;\r\n","import React from 'react';\r\nimport s from './App.module.css';\r\nimport {HW13} from '../../../p2-homeworks/h13/HW13';\r\nimport HW12 from '../../../p2-homeworks/h12/HW12';\r\nimport HW10 from '../../../p2-homeworks/h10/HW10';\r\nimport HW11 from '../../../p2-homeworks/h11/HW11';\r\nimport HW4 from '../../../p2-homeworks/h4/HW4';\r\n\r\nfunction App() {\r\n    return (\r\n        <div className={s.App}>\r\n            <div>react homeworks:</div>\r\n            {/*<HW1/>*/}\r\n            {/*<HW2/>*/}\r\n            {/*<HW3/>*/}\r\n            {/*<HW4/>*/}\r\n            {/*<HW5/>*/}\r\n            {/*<HW6/>*/}\r\n            {/*<HW7/>*/}\r\n            {/*<HW8/>*/}\r\n            {/*<HW9/>*/}\r\n            {/*<HW10/>*/}\r\n            <HW11/>\r\n            <HW12/>\r\n            <HW13/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","export type StateType = {\r\n    loading: any\r\n}\r\n\r\nconst initState:StateType = {\r\n loading: false\r\n};\r\n\r\nexport const loadingReducer = (state = initState, action:loadingACType): StateType => { // fix any\r\n    switch (action.type) {\r\n        case \"loading\":\r\n            return {...state, ...action.payload}\r\n        default: return state;\r\n    }\r\n};\r\n\r\ntype loadingACType = {\r\n    type: 'loading'\r\n    payload:{\r\n        loading: boolean\r\n    }\r\n\r\n}\r\n\r\n\r\nexport const loadingAC = (loading:boolean): loadingACType => ({type: 'loading', payload: {loading}});","import {loadingReducer} from \"./loadingReducer\";\r\nimport {combineReducers, createStore} from 'redux';\r\nimport {themeReducer} from '../../h12/bll/themeReducer';\r\n\r\nconst reducers = combineReducers({\r\n    loading: loadingReducer,\r\n    theme: themeReducer\r\n });\r\n\r\nconst store = createStore(reducers);\r\n\r\nexport default store\r\n\r\nexport type AppStoreType = ReturnType<typeof reducers>\r\n\r\n// @ts-ignore\r\n window.store = store; // for dev\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./p1-main/m1-ui/u1-app/App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport {Provider} from 'react-redux';\r\nimport store from './p2-homeworks/h10/bll/store';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n        <App/>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}